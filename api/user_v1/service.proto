syntax = "proto3";

package user_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/Arkosh744/auth-grpc/pkg/user_v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User API";
    version: "0.3";
    contact: {
      name: "Kirill";
      url: "https://github.com/Arkosh744";
    };
  };
  host: "localhost:8080";
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";

};

service User {
  // Create a new user
  rpc Create(CreateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/v1/create"
      body: "*"
    };
  };
  // Get user
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/user/v1/get/{username}"
    };
  };
  rpc List(google.protobuf.Empty) returns (ListResponse) {
    option (google.api.http) = {
      get: "/user/v1/list"
    };
  };
  rpc Update(UpdateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/user/v1/update/{username}"
      body: "*"
    };
  };
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/user/v1/delete/{username}"
    };
  };
}

message UserInfo {
  // Username must be unique and between 3 and 32 characters long
  string username = 1 [(validate.rules).string = {min_len: 3, max_len: 32}];
  string email = 2 [(validate.rules).string.email = true];
  Role role = 3;

  oneof specialization {
    Engineer engineer = 6;
    Manager manager = 7;
  }
}

message Engineer {
  int64 level = 1 [(validate.rules).int64.gt = 0, (validate.rules).int64.lt = 10];
  string company = 2 [(validate.rules).string = {min_len: 3, max_len: 32}];
  string language = 3 [(validate.rules).string = {min_len: 2, max_len: 32}];
}

message Manager {
  int64 level = 1 [(validate.rules).int64.gt = 0, (validate.rules).int64.lt = 10];
  string company = 2 [(validate.rules).string = {min_len: 3, max_len: 32}];
  string department = 3 [(validate.rules).string = {min_len: 2, max_len: 32}];
}

enum Role {
  UNKNOWN = 0;
  ADMIN = 1;
  USER = 2;
}

message CreateRequest {
  UserInfo user = 1;
  string password = 2 [(validate.rules).string.min_len = 8];
  string password_confirm = 3 [(validate.rules).string.min_len = 8];
}

message GetRequest {
  // TODO: use oneof here to get by username or email
  string username = 1;
}

message GetResponse {
  UserInfo user = 1;

  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
}

message ListResponse {
  repeated UserInfo users = 1;
}

message UpdateRequest {
  string username = 1;

  google.protobuf.StringValue new_username = 2;
  google.protobuf.StringValue new_email = 3;
  google.protobuf.StringValue new_password = 4;
  Role  new_role = 5;
}

message DeleteRequest {
  string username = 1;
}
